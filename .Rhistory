URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
fileZip <<- "data/raw/yelp_dataset_challenge_academic_dataset.zip"
if (!file.exists(fileZip)) download.file(URLData, fileZip)
#trainingData <<- read.csv(fileZip)
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
fileZip <<- "data\raw\yelp_dataset_challenge_academic_dataset.zip"
if (!file.exists(fileZip)) download.file(URLData, fileZip)
#trainingData <<- read.csv(fileZip)
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
directoryRaw <<- "data/raw"
if (!dir.exists(directoryRaw)) dir.create(directoryRaw)
if (!dir.exists(directoryRaw)) dir.create(directoryRaw)
dir.create(directoryRaw)
getpwd()
getwd()
dir.create(directoryRaw)
directoryRaw <<- "./data/raw"
if (!dir.exists(directoryRaw)) dir.create(directoryRaw)
if (!dir.exists(directoryRaw)) echo 1
if (!dir.exists(directoryRaw)) print "1"
if (!dir.exists(directoryRaw)) "1"
if (!dir.exists(directoryRaw)) dir.create(file.path(directoryRaw))
?dir.create
directoryRaw <<- "data/raw"
if (!dir.exists(directoryRaw)) dir.create(directoryRaw)
if (!dir.exists(directoryRaw)) dir.create(directoryRaw, recursive=TRUE)
fileZip <<- "yelp_dataset_challenge_academic_dataset.zip"
if (!file.exists(paste(directoryRaw, fileZip, sep = "/", collapse = NULL))) download.file(URLData, fileZip)
?unzip
unzip(paste(directoryRaw, fileZip, sep = "/", collapse = NULL))
?unzip
unzip(paste(directoryRaw, fileZip, sep = "/", collapse = NULL), exdir = directoryRaw)
library(rjson)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
json_file_business <- paste(basePath, "business.json", sep ="")
install.packages("rjson")
library(rjson)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
json_file_business <- paste(basePath, "business.json", sep ="")
if (file.exists(json_file_business))
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
head(json_data_business)
col(json_data_business)
json_data_business[[1]]
json_data_business[[2]]
json_data_business[1
}
json_data_business[1]
json_data_business[2]
json_data_business$business_id
json_data_business$results
df <- data.frame()
for(n in json_data_business){
business_id <- n$business_id
full_address <- n$full_address
newrow <- data.frame(business_id, full_address, stringsAsFactors=FALSE, check.rows=FALSE)
df <- rbind(df, newrow)
}
json_data_business
json_data_business <- fromJSON(json_file_business)
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
json_data_business <- fromJSON(file=json_file_business, method='C')
install.packages("jsonlite")
library(jsonlite)
json_data_business <- fromJSON(file=json_file_business)
library(rjson)
json_data_business <- fromJSON(file=json_file_business)
?fromJSON
library(rjson)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
json_file_business <- paste(basePath, "business.json", sep ="")
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
#Set directory where it's to be stored
directoryRaw <<- "data/raw"
#Create directory, if it doesn't exists
if (!dir.exists(directoryRaw)) dir.create(directoryRaw, recursive=TRUE)
fileZip <<- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset.zip", sep = "/", collapse = NULL)
if (!file.exists(fileZip))
{
download.file(URLData, fileZip)
unzip(fileZip, exdir = directoryRaw)
}
#Get data from file
library(rjson)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
json_file_business <- paste(basePath, "business.json", sep ="")
if (file.exists(json_file_business))
#json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
json_data_business <- fromJSON(file=json_file_business)
getData <- function(){
#Set URL Data path
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
#Set directory where it's to be stored
directoryRaw <<- "data/raw"
#Create directory, if it doesn't exists
if (!dir.exists(directoryRaw)) dir.create(directoryRaw, recursive=TRUE)
fileZip <<- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset.zip", sep = "/", collapse = NULL)
if (!file.exists(fileZip))
{
download.file(URLData, fileZip)
unzip(fileZip, exdir = directoryRaw)
}
#Set URL Data path
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
#Set directory where it's to be stored
directoryRaw <<- "data/raw"
#Create directory, if it doesn't exists
if (!dir.exists(directoryRaw)) dir.create(directoryRaw, recursive=TRUE)
fileZip <<- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset.zip", sep = "/", collapse = NULL)
if (!file.exists(fileZip))
{
download.file(URLData, fileZip)
unzip(fileZip, exdir = directoryRaw)
}
library(jsonlite)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
json_file_business <- paste(basePath, "business.json", sep ="")
#CHECKPOINT!! 20151007
if (file.exists(json_file_business))
#json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
json_data_business <- fromJSON(json_file_business)
json_data_business <- fromJSON(json_file_business)
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
library(rjson)
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=""))
names(json_data_business)
json_data_business
head(json_data_business)
json_data_business <- fromJSON(readLines(json_file_business), collapse="")
json_data_business <- fromJSON(readLines(json_file_business))
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=","))
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
#Set directory where it's to be stored
directoryRaw <<- "data/raw"
#Create directory, if it doesn't exists
if (!dir.exists(directoryRaw)) dir.create(directoryRaw, recursive=TRUE)
fileZip <<- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset.zip", sep = "/", collapse = NULL)
if (!file.exists(fileZip))
{
download.file(URLData, fileZip)
unzip(fileZip, exdir = directoryRaw)
}
#Get data from file
library(rjson)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
json_file_business <- paste(basePath, "business.json", sep ="")
#CHECKPOINT!! 20151007
if (file.exists(json_file_business))
json_data_business <- fromJSON(paste(readLines(json_file_business), collapse=","))
#json_data_business <- fromJSON(json_file_business)
setwd("d:\")
?setwd
setwd('d:')
setwd("D:/Privado/repos/10.Capstone")
getData <- function(){
#Set URL Data path
URLData <<- "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/yelp_dataset_challenge_academic_dataset.zip"
#Set directory where it's to be stored
directoryRaw <<- "data/raw"
#Create directory, if it doesn't exists
if (!dir.exists(directoryRaw)) dir.create(directoryRaw, recursive=TRUE)
fileZip <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset.zip", sep = "/", collapse = NULL)
if (!file.exists(fileZip))
{
download.file(URLData, fileZip)
unzip(fileZip, exdir = directoryRaw)
}
}
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] <- flatten(data)
}
}
}
main <- function(){
getData()
getJSON()
}
main()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] <- data
}
}
}
getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
print(set)
class(data)
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
#json_data[set] <- flatten(data)
}
}
}
getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
print(set)
print(class(data))
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
#json_data[set] <- flatten(data)
}
}
}
getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
print(set)
print(class(data))
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] = flatten(data)
}
}
}
getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
print(set)
print(class(data))
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] <<- flatten(data)
}
}
}
getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
print(set)
print(class(data))
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] <- flatten(data)
}
}
return json_data[set]
}
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
print(set)
print(class(data))
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] <- flatten(data)
}
}
return json_data
}
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[set] <- flatten(data)
}
}
json_data
}
data <- getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[[set]] <<- flatten(data)
}
}
#json_data
}
getJSON()
getJSON <- function(){
#Get data from file
# library(rjson)
library(jsonlite)
require(dplyr)
basePath <- paste(directoryRaw, "yelp_dataset_challenge_academic_dataset/yelp_academic_dataset_", sep = "/")
files <- c("business", "checkin", "review", "tip", "user")
json_file <- list()
json_data <- list()
limit = 100
for (set in files) {
json_file[set] <- paste(basePath, set, ".json", sep ="")
print(json_file[set])
if (file.exists(as.character(json_file[set]))){
data <- fromJSON(paste("[",paste(readLines(as.character(json_file[set]), n=limit),
collapse=","),"]"), simplifyDataFrame = TRUE)
# Forum solution to  flatten file
# https://class.coursera.org/dsscapstone-005/forum/thread?thread_id=24
json_data[[set]] <- flatten(data)
}
}
json_data
}
getJSON()
data <- getJSON()
names(data)
names(data$business)
names(data)
names(data$checkin)
head(data$checkin)
view(data$checkin)
View(data$checkin)
View(data$review)
View(data$tip)
View(data$user)
View(data$business)
